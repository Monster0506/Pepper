Skipping line 1: %% Test: String Operations
Skipping line 2: 
Skipping line 3: %% String concatenation
Processing line 4: LET first: string = "Hello"
  Parsed LET: var_name=first, var_type=string, expression="Hello"
Evaluating expression: '"Hello"' with expected type: string
Declared variable: first = Hello (type: string)
Current variables: {'first': ('Hello', 'string')}
--------------------
Processing line 5: LET second: string = "World"
  Parsed LET: var_name=second, var_type=string, expression="World"
Evaluating expression: '"World"' with expected type: string
Declared variable: second = World (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string')}
--------------------
Processing line 6: LET greeting: string = first + " " + second
  Parsed LET: var_name=greeting, var_type=string, expression=first + " " + second
Evaluating expression: 'first + " " + second' with expected type: string
Declared variable: greeting = Hello World (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hello World', 'string')}
--------------------
Processing line 7: SHOW(greeting)
  Parsed SHOW: expression=greeting
Evaluating expression: 'greeting' with expected type: None
SHOW: Hello World
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hello World', 'string')}
--------------------
Skipping line 8: 
Skipping line 9: %% String append
Processing line 10: REAS greeting = greeting "!" [a]
  Parsed REAS: var_name=greeting, expression=greeting "!" [a]
Evaluating expression: 'greeting "!" [a]' with expected type: string
Reassigned variable: greeting = Hello World! (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hello World!', 'string')}
--------------------
Processing line 11: SHOW(greeting)
  Parsed SHOW: expression=greeting
Evaluating expression: 'greeting' with expected type: None
SHOW: Hello World!
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hello World!', 'string')}
--------------------
Skipping line 12: 
Skipping line 13: %% String remove
Processing line 14: REAS greeting = greeting "o" [r]
  Parsed REAS: var_name=greeting, expression=greeting "o" [r]
Evaluating expression: 'greeting "o" [r]' with expected type: string
Reassigned variable: greeting = Hell Wrld! (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hell Wrld!', 'string')}
--------------------
Processing line 15: SHOW(greeting)
  Parsed SHOW: expression=greeting
Evaluating expression: 'greeting' with expected type: None
SHOW: Hell Wrld!
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hell Wrld!', 'string')}
--------------------
Skipping line 16: 
Skipping line 17: %% String insert
Processing line 18: REAS greeting = greeting "o" [n] 5
  Parsed REAS: var_name=greeting, expression=greeting "o" [n] 5
Evaluating expression: 'greeting "o" [n] 5' with expected type: string
Reassigned variable: greeting = Hello Wrld! (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hello Wrld!', 'string')}
--------------------
Processing line 19: SHOW(greeting)
  Parsed SHOW: expression=greeting
Evaluating expression: 'greeting' with expected type: None
SHOW: Hello Wrld!
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('Hello Wrld!', 'string')}
--------------------
Skipping line 20: 
Skipping line 21: %% String replace first occurrence
Processing line 22: REAS greeting = greeting "l" [p] "L"
  Parsed REAS: var_name=greeting, expression=greeting "l" [p] "L"
Evaluating expression: 'greeting "l" [p] "L"' with expected type: string
Reassigned variable: greeting = HeLlo Wrld! (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLlo Wrld!', 'string')}
--------------------
Processing line 23: SHOW(greeting)
  Parsed SHOW: expression=greeting
Evaluating expression: 'greeting' with expected type: None
SHOW: HeLlo Wrld!
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLlo Wrld!', 'string')}
--------------------
Skipping line 24: 
Skipping line 25: %% String replace all occurrences
Processing line 26: REAS greeting = greeting "l" [P] "L"
  Parsed REAS: var_name=greeting, expression=greeting "l" [P] "L"
Evaluating expression: 'greeting "l" [P] "L"' with expected type: string
Reassigned variable: greeting = HeLLo WrLd! (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string')}
--------------------
Processing line 27: SHOW(greeting)
  Parsed SHOW: expression=greeting
Evaluating expression: 'greeting' with expected type: None
SHOW: HeLLo WrLd!
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string')}
--------------------
Skipping line 28: 
Skipping line 29: %% String length
Processing line 30: LET length: int = greeting [l]
  Parsed LET: var_name=length, var_type=int, expression=greeting [l]
Evaluating expression: 'greeting [l]' with expected type: int
 List length result: 11
Declared variable: length = 11 (type: int)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int')}
--------------------
Processing line 31: SHOW(length)
  Parsed SHOW: expression=length
Evaluating expression: 'length' with expected type: None
SHOW: 11
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int')}
--------------------
Skipping line 32: 
Skipping line 33: %% String indexing
Skipping line 34: %% LET char: string = greeting [i] 1
Skipping line 35: %% SHOW(char)
Skipping line 36: 
Skipping line 37: %% Multiple string operations
Processing line 38: LET text: string = "Hello Hello Hello"
  Parsed LET: var_name=text, var_type=string, expression="Hello Hello Hello"
Evaluating expression: '"Hello Hello Hello"' with expected type: string
Declared variable: text = Hello Hello Hello (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int'), 'text': ('Hello Hello Hello', 'string')}
--------------------
Processing line 39: SHOW(text)
  Parsed SHOW: expression=text
Evaluating expression: 'text' with expected type: None
SHOW: Hello Hello Hello
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int'), 'text': ('Hello Hello Hello', 'string')}
--------------------
Processing line 40: REAS text = text "Hello" [p] "Hi"
  Parsed REAS: var_name=text, expression=text "Hello" [p] "Hi"
Evaluating expression: 'text "Hello" [p] "Hi"' with expected type: string
Reassigned variable: text = Hi Hello Hello (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int'), 'text': ('Hi Hello Hello', 'string')}
--------------------
Processing line 41: SHOW(text)
  Parsed SHOW: expression=text
Evaluating expression: 'text' with expected type: None
SHOW: Hi Hello Hello
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int'), 'text': ('Hi Hello Hello', 'string')}
--------------------
Processing line 42: REAS text = text "Hello" [P] "Hey"
  Parsed REAS: var_name=text, expression=text "Hello" [P] "Hey"
Evaluating expression: 'text "Hello" [P] "Hey"' with expected type: string
Reassigned variable: text = Hi Hey Hey (type: string)
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int'), 'text': ('Hi Hey Hey', 'string')}
--------------------
Processing line 43: SHOW(text)
  Parsed SHOW: expression=text
Evaluating expression: 'text' with expected type: None
SHOW: Hi Hey Hey
Current variables: {'first': ('Hello', 'string'), 'second': ('World', 'string'), 'greeting': ('HeLLo WrLd!', 'string'), 'length': (11, 'int'), 'text': ('Hi Hey Hey', 'string')}
--------------------
